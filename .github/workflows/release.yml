name: Release

on:
  push:
    branches:
      - main
      - beta
      - alpha
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create scripts directory
        run: mkdir -p scripts

      - name: Create release notes generator script
        run: |
          cat > scripts/generate-release-notes.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const version = process.argv[2];
          if (!version) {
            console.error('Version not provided');
            process.exit(1);
          }
          
          const releaseNotesDir = path.join(__dirname, '..', 'docs', 'RELEASE_NOTES');
          if (!fs.existsSync(releaseNotesDir)) {
            fs.mkdirSync(releaseNotesDir, { recursive: true });
          }
          
          const date = new Date().toISOString().split('T')[0];
          const filename = `v${version}.md`;
          const filepath = path.join(releaseNotesDir, filename);
          
          const content = `# Release Notes - v${version}
          
          **Release Date:** ${date}
          
          ## 🎯 Highlights
          
          This release includes various improvements and bug fixes.
          
          ## 📋 Full Changelog
          
          Please refer to the [CHANGELOG.md](../../CHANGELOG.md) for a complete list of changes.
          
          ## 📦 Installation
          
          Download the appropriate installer for your platform from the [releases page](https://github.com/managerx/managerx/releases/tag/v${version}).
          
          ### Supported Platforms
          - Windows 10/11 (x64)
          - macOS 12+ (Intel & Apple Silicon)
          - Linux (Ubuntu 20.04+, Fedora 36+)
          
          ## 🐛 Known Issues
          
          Please check our [issue tracker](https://github.com/managerx/managerx/issues) for known issues.
          
          ## 📝 Notes
          
          - This is a pre-release version. Use with caution in production environments.
          - Please backup your saves before upgrading.
          `;
          
          fs.writeFileSync(filepath, content);
          console.log(`Release notes generated: ${filepath}`);
          EOF
          chmod +x scripts/generate-release-notes.js

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: managerx-bot
          GIT_AUTHOR_EMAIL: bot@managerx.com
          GIT_COMMITTER_NAME: managerx-bot
          GIT_COMMITTER_EMAIL: bot@managerx.com
        run: pnpm release

  build-desktop:
    name: Build Desktop App - ${{ matrix.platform }}
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: ubuntu-latest
            rust-target: 'x86_64-unknown-linux-gnu'
          - platform: 'macos'
            os: macos-latest
            rust-target: 'x86_64-apple-darwin'
          - platform: 'macos-arm'
            os: macos-latest
            rust-target: 'aarch64-apple-darwin'
          - platform: 'windows'
            os: windows-latest
            rust-target: 'x86_64-pc-windows-msvc'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.release.outputs.new_release_version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/desktop/src-tauri -> target'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: apps/desktop
          tagName: v${{ needs.release.outputs.new_release_version }}
          releaseName: 'ManagerX v${{ needs.release.outputs.new_release_version }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.rust-target }}

      - name: Prepare release artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p release-artifacts
          cp -r apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/deb/*.deb release-artifacts/ || true
          cp -r apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/appimage/*.AppImage release-artifacts/ || true
          cd release-artifacts && zip -r ../managerx-v${{ needs.release.outputs.new_release_version }}-${{ matrix.platform }}.zip . && cd ..

      - name: Prepare release artifacts (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          mkdir -p release-artifacts
          cp -r apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/dmg/*.dmg release-artifacts/ || true
          cp -r apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/macos/*.app release-artifacts/ || true
          cd release-artifacts && zip -r ../managerx-v${{ needs.release.outputs.new_release_version }}-${{ matrix.platform }}.zip . && cd ..

      - name: Prepare release artifacts (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release-artifacts
          Copy-Item "apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi" -Destination "release-artifacts/" -ErrorAction SilentlyContinue
          Copy-Item "apps/desktop/src-tauri/target/${{ matrix.rust-target }}/release/bundle/nsis/*.exe" -Destination "release-artifacts/" -ErrorAction SilentlyContinue
          Compress-Archive -Path "release-artifacts/*" -DestinationPath "managerx-v${{ needs.release.outputs.new_release_version }}-${{ matrix.platform }}.zip"

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.new_release_version }}
          files: |
            managerx-v${{ needs.release.outputs.new_release_version }}-${{ matrix.platform }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}